type Controller @entity {
  "controller address"
  id: ID!
  governance: String!
  store: String!
  createAtBlock: BigInt!
  timestamp: BigInt!
}

type Vault @entity {
  "vault address"
  id: ID!
  name: String!
  symbol: String!
  decimal: BigInt!
  createAtBlock: BigInt!
  timestamp: BigInt!
  strategy: Strategy
  active: Boolean
  pool: Pool
  underlying: Token!
  tvl: BigDecimal!
  apy: BigDecimal!
  tvlSequenceId: Int!
  priceFeedSequenceId: Int!
  priceUnderlying: BigDecimal!
  apyReward: BigDecimal!
  apyAutoCompound: BigDecimal!
  lastShareTimestamp: BigInt!
  lastSharePrice: BigInt!
  lastPriceUpdate: BigInt!
  lastTimestampProcess: BigInt!
  skipFirstApyReward: Boolean
  users: [String!]!
  lastUsersShareTimestamp: BigInt!
}

type PriceHistory @entity(immutable: true) {
  id: Bytes!

  price: BigDecimal!
  vault: Vault!

  timestamp: BigInt!
  createAtBlock: BigInt!
}

type VaultHistory @entity(immutable: true) {
  "tx + vault address"
  id: Bytes!
  vault: Vault!

  priceUnderlying: BigDecimal!
  sharePrice: BigInt!
  sharePriceDec: BigDecimal!
  timestamp: BigInt!
}

type Strategy @entity {
  "strategy address"
  id: ID!
  vault: Vault!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type LastHarvest @entity(immutable: true) {
  id: Bytes!
  tx: String!
  strategy: Strategy!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type SharePrice @entity(immutable: true) {
  "tx hash"
  id: Bytes!
  vault: Vault
  strategy: Strategy
  oldSharePrice: BigInt!
  newSharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type Tvl @entity(immutable: true) {
  "tx-vault"
  id: Bytes!
  vault: Vault
  totalSupply: BigInt!
  value: BigDecimal!
  priceUnderlying: BigDecimal!
  sharePrice: BigInt!
  tvlSequenceId: Int!
  timestamp: BigInt!
  createAtBlock: BigInt!
  sharePriceDivDecimal: BigDecimal!
  decimal: BigDecimal!
}

type Pool @entity {
  "pool address"
  id: ID!
  vault: Vault!
  "pool type"
  type: PoolType!
  # lpToken: Token!
  rewardTokens: [Token!]!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type Token @entity {
  "token address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

enum PoolType {
  NoMintRewardPool
  PotPool
  ExclusiveRewardPool
}

type Reward @entity(immutable: true) {
  # transaction hash alone is not unique, we need to add pool address
  "transactionhash-pooladdress-rewardtoken"
  id: Bytes!
  timestamp: BigInt!
  pool: Pool!
  "token that is rewarded"
  token: Token!
  "amount of reward added"
  reward: BigInt!
  tx: String!
  "reward rate after reward was added - valid untill next reward or periodFinish"
  rewardRate: BigInt!
  "timestamp when the pool runs out of rewards if no new rewards are added"
  periodFinish: BigInt!
}

type ApyReward @entity(immutable: true) {
  "transactionhash-vaultaddress"
  id: Bytes!
  vault: Vault!
  apy: BigDecimal!
  apr: BigDecimal!
  prices: BigDecimal!
  periodFinishes: BigInt!
  rewardRates: BigInt!
  rewardForPeriods: BigDecimal!
  tvlUsd: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type ApyAutoCompound @entity(immutable: true) {
  "transactionhash-vaultaddress"
  id: Bytes!
  vault: Vault!
  apy: BigDecimal!
  apr: BigDecimal!
  diffSharePrice: BigDecimal!
  diffTimestamp: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type GeneralApy @entity(immutable: true) {
  "transactionhash-vaultaddress"
  id: Bytes!
  apy: BigDecimal!
  apyAutoCompound: BigDecimal!
  apyReward: BigDecimal!
  vault: Vault!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserBalance @entity {
  "vault-user"
  id: ID!
  vault: Vault!
  userAddress: String!
  value: BigDecimal!
  poolBalance: BigDecimal!
  vaultBalance: BigDecimal!
  underlyingBalance: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserBalanceHistory @entity(immutable: true) {
  "tx-user"
  id: Bytes!
  userAddress: String!
  transactionType: TransactionType!
  vault: Vault!
  "Amount balance in user address"
  value: BigDecimal!
  vaultBalance: BigDecimal!
  poolBalance: BigDecimal!
  underlyingBalance: BigDecimal!
  priceUnderlying: BigDecimal!
  sharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserTotalProfit @entity {
  "user"
  id: ID!
  "profit * current usd price"
  value: BigDecimal!
}

type UserProfit @entity {
  "user-vault"
  id: Bytes!
  "profit * current usd price"
  value: BigDecimal!
  vault: Vault!
  userAddress: String
}

type UserProfitHistory @entity(immutable: true) {
  "tx-user-vault"
  id: Bytes!
  userAddress: String
  transactionType: TransactionType!
  vault: Vault!
  "Amount profit in user address"
  value: BigDecimal!
  sharePrice: BigInt!
  transactionAmount: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserTransaction @entity(immutable: true) {
  "tx"
  id: Bytes!
  userAddress: String!
  transactionType: TransactionType!
  vault: Vault!
  "Amount in transaction"
  value: BigInt!
  sharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

enum TransactionType {
  Deposit
  Withdraw
}

type TotalTvl @entity {
  id: ID!
  value: BigDecimal!
}

type TotalTvlHistory @entity(immutable: true) {
  id: Bytes!

  sequenceId: BigInt!
  value: BigDecimal!

  timestamp: BigInt!
  createAtBlock: BigInt!
}

type TotalTvlHistoryV2 @entity(immutable: true) {
  id: Bytes!

  value: BigDecimal!
  sequenceId: BigInt!

  timestamp: BigInt!
  createAtBlock: BigInt!
}

type TotalTvlUtil @entity{
  # id is 1
  id: Bytes!

  vaults: [String!]!
  lastTimestampUpdate: BigInt!
  lastBlockUpdate: BigInt!

  timestamp: BigInt!
  createAtBlock: BigInt!
}

type TotalTvlCount @entity{
  # id is 1
  id: ID!

  length: BigInt!
}

type PriceFeed @entity(immutable: true) {
  id: Bytes!
  vault: Vault!
  price: BigDecimal!
  sharePrice: BigDecimal!
  priceFeedSequenceId: Int!
  # price * sharePrice
  value: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type TokenPrice @entity {
  id: ID!
  price: BigDecimal!
  timestamp: BigInt!
}

type RewardPaidEntity @entity(immutable: true) {
  id: Bytes!
  userAddress: String!
  pool: Pool!
  value: BigInt!
  price: BigDecimal!
  token: Token!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type TokenInPrice @entity {
  id: Bytes!
  price: BigInt!
  lastUpdate: BigInt!
}